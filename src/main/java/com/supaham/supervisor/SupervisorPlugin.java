package com.supaham.supervisor;

import com.google.common.base.Preconditions;

import com.supaham.commons.bukkit.SimpleCommonPlugin;
import com.supaham.commons.bukkit.TickerTask;
import com.supaham.commons.bukkit.worldedit.CommandsManager;
import com.supaham.supervisor.SupervisorConfig.Defaults;
import com.supaham.supervisor.contexts.PluginsContext;
import com.supaham.supervisor.contexts.ServerInfoContext;
import com.supaham.supervisor.contexts.SystemPropertiesContext;
import com.supaham.supervisor.contexts.WorldsContext;
import com.supaham.supervisor.report.Context;
import com.supaham.supervisor.report.ContextRegistry;
import com.supaham.supervisor.report.OutputFormat;
import com.supaham.supervisor.report.OutputFormat.OutputFormatSerializer;
import com.supaham.supervisor.report.Report;
import com.supaham.supervisor.report.ReportSpecs;
import com.supaham.supervisor.report.ReportSpecs.ReportSpecsBuilder;

import org.bukkit.plugin.Plugin;

import java.util.concurrent.Callable;

import javax.annotation.Nonnull;

import pluginbase.config.SerializationRegistrar;
import pluginbase.logging.PluginLogger;
import pluginbase.plugin.Settings;

/**
 * Created by Ali on 14/10/2015.
 */
public class SupervisorPlugin extends SimpleCommonPlugin<SupervisorPlugin> {

    public static final String TITLE_SUFFIX = "Report Generated by Supervisor (http://github.com/SupaHam/Supervisor)";
    private static SupervisorPlugin instance;

    private CommandsManager commandsManager;

    private ContextRegistry contextRegistry;

    static {
        SerializationRegistrar.registerClass(OutputFormatSerializer.class);
    }

    public static SupervisorPlugin get() {
        return instance;
    }

    public static PluginLogger log() {
        return get().getLog();
    }

    public static Report createReport(ReportSpecs specs) {
        Report report = new Report(specs);
        report.addAll(specs.getContextRegistry().getContexts());
        return report;
    }

    public static void main(String[] args) {
        System.out.println(System.getProperty("java.home"));
        System.out.println(System.getProperty("java.vendor"));
        System.out.println(System.getProperty("java.vendor.url"));
        System.out.println(System.getProperty("java.version"));
        System.out.println(System.getProperty("java.vm.name"));
        System.out.println(System.getProperty("java.vm.specification.name"));
        System.out.println(System.getProperty("java.vm.specification.vendor"));
        System.out.println(System.getProperty("java.vm.specification.version"));
        System.out.println(System.getProperty("java.vm.vendor"));
        System.out.println(System.getProperty("java.vm.version"));
        System.out.println(System.getProperty("os.arch"));
        System.out.println(System.getProperty("os.name"));
        System.out.println(System.getProperty("os.version"));
        System.out.println(System.getProperty("path.separator"));
        System.out.println(System.getProperty("user.dir"));
        System.out.println(System.getProperty("user.home"));
        System.out.println(System.getProperty("user.name"));
        System.out.println(System.getProperty("user.language"));
        System.out.println(System.getProperty("user.timezone"));
        System.getProperties().list(System.out);
    }

    public SupervisorPlugin() {
        super(SupervisorPlugin.class, "sv");
        Preconditions.checkState(instance == null, "SupervisorPlugin already initialized.");
        instance = this;
        this.pluginAgent.setDefaultSettingsCallable(new Callable<Settings>() {
            public Settings call() throws Exception {
                return new SupervisorConfig(getPluginBase());
            }
        });
    }

    @Override public void onEnable() {
        super.onEnable();

        this.commandsManager = new SupervisorCommandsManager(this);

        this.contextRegistry = new ContextRegistry();
        registerDefaultContexts();

        new TickerTask(this, 1) {
            @Override public void run() {
                commandsManager.registerCommands();
            }
        }.start();
    }

    private void registerDefaultContexts() {
        registerContext(this, new SystemPropertiesContext());
        registerContext(this, new ServerInfoContext());
        registerContext(this, new PluginsContext());
        registerContext(this, new WorldsContext());
    }

    /**
     * Returns a new {@link ReportSpecsBuilder} instance with default settings. This builder sets only the following properties, requiring you to do
     * the rest:
     * <ul>
     * <li>{@link ReportSpecsBuilder#contextRegistry(ContextRegistry)}</li>
     * <li>{@link ReportSpecsBuilder#title(String)}</li>
     * <li>{@link ReportSpecsBuilder#format(OutputFormat)}</li>
     * <li>{@link ReportSpecsBuilder#reportLevel(int)}</li>
     * </ul>
     *
     * @return new builder
     */
    public ReportSpecsBuilder createDefaultBuilder() {
        Defaults defaults = getSettings().getDefaults();
        return ReportSpecs.builder(this).contextRegistry(getContextRegistry()).title("Report").format(defaults.getFormat())
            .reportLevel(defaults.getReportLevel());
    }

    public void registerContext(@Nonnull Plugin owner, @Nonnull Context context) {
        getContextRegistry().register(owner, context);
    }

    public CommandsManager getCommandsManager() {
        return commandsManager;
    }

    public SupervisorConfig getSettings() {
        return ((SupervisorConfig) getPluginBase().getSettings());
    }

    public ContextRegistry getContextRegistry() {
        return contextRegistry;
    }
}
