package com.supaham.supervisor;

import com.google.common.base.Preconditions;

import com.supaham.commons.utils.CollectionUtils;
import com.supaham.supervisor.report.OutputFormat;
import com.supaham.supervisor.report.Report;
import com.supaham.supervisor.report.ReportContext;
import com.supaham.supervisor.report.ReportContextRegistry;
import com.supaham.supervisor.report.ReportSpecifications;
import com.supaham.supervisor.report.serializers.JsonReportSerializer;
import com.supaham.supervisor.report.serializers.PrettyTxtReportSerializer;
import com.supaham.supervisor.report.serializers.ReportSerializer;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

import javax.annotation.Nonnull;

/**
 * Created by Ali on 27/10/2015.
 */
public class Supervisor {

    public static final String TITLE_SUFFIX = "Report Generated by Supervisor (http://github.com/SupaHam/Supervisor)";

    private final Logger logger;
    private final ReportContextRegistry contextRegistry;
    private final Map<OutputFormat, ReportSerializer> defaultReportSerializers = new HashMap<>();

    public static Report createReport(ReportSpecifications specs) {
        Report report = new Report(specs);
        for (ReportContext reportContext : specs.getContextRegistry().getSortedContexts()) {
            // If exclusions include this context, ignore it.
            if (CollectionUtils.containsIgnoreCase(specs.getExcludes(), reportContext.getName())) {
               continue; 
            }
            // If inclusions were defined and this context is not within the inclusions, ignore it.
            if (!specs.getIncludes().isEmpty() && !CollectionUtils.containsIgnoreCase(specs.getIncludes(), reportContext.getName())) {
                continue;
            }
            report.add(reportContext.createEntry(specs));
        }
        return report;
    }

    {
        this.defaultReportSerializers.put(OutputFormat.JSON, new JsonReportSerializer(this));
        this.defaultReportSerializers.put(OutputFormat.PRETTY_TXT, new PrettyTxtReportSerializer(this));
    }

    public Supervisor(@Nonnull Logger logger, @Nonnull ReportContextRegistry contextRegistry) {
        this.logger = Preconditions.checkNotNull(logger, "logger cannot be null.");
        this.contextRegistry = Preconditions.checkNotNull(contextRegistry, "contextRegistry cannot be null.");
    }

    public Logger getLogger() {
        return logger;
    }

    public ReportContextRegistry getContextRegistry() {
        return contextRegistry;
    }

    public ReportSerializer getReportSerializer(OutputFormat outputFormat) {
        return this.defaultReportSerializers.get(outputFormat);
    }

    public Map<OutputFormat, ReportSerializer> getDefaultReportSerializers() {
        return defaultReportSerializers;
    }
}
